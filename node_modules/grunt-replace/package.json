{
  "name": "grunt-replace",
  "version": "0.2.1",
  "description": "Grunt task to replace inline patterns with defined variables to make the world a better place.",
  "homepage": "http://github.com/outaTiME/grunt-replace",
  "keywords": [
    "gruntplugin"
  ],
  "author": {
    "name": "outaTiME",
    "email": "afalduto@gmail.com",
    "url": "http://outa.im"
  },
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/outaTiME/grunt-replace.git"
  },
  "bugs": {
    "url": "http://github.com/outaTiME/grunt-replace/issues"
  },
  "main": "grunt.js",
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.3.15",
    "grunt-contrib-clean": "~0.2.0"
  },
  "readme": "# grunt-replace\n\n[![build status](https://secure.travis-ci.org/outaTiME/grunt-replace.png)](http://travis-ci.org/outaTiME/grunt-replace)\n\n[Grunt][grunt] task to replace inline patterns with defined variables to make the world a better place.\n\n## Getting Started\n\nInstall this grunt plugin next to your project's with: `npm install grunt-replace`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-replace');\n```\n\n## Documentation\n\n### Full example usage\n\n#### Put variable pattern in source\n\nIn our source file we define the place where variable will be injected (default `prefix` used by replacer is `@@`):\n\n```\n// build/manifest.appcache\n\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\n#### Define variables per file in gruntfile\n\n```javascript\n//...\nreplace: {\n  dist: {\n    src: ['build/manifest.appcache'],\n    dest: 'public',\n    variables: {\n      timestamp: '<%= grunt.template.today() %>'\n    }\n  }\n}\n//...\n```\n\n#### Explain please !!\n\nIn details, we have one source `build/manifest.appcache` and want to inject `timestamp` variable value and then put them in `dest` destination.\n\n### Usage variations\n\n#### Replace over src file list (one target)\n\n```javascript\nreplace: {\n  dist: {\n    src: ['build/manifest.appcache', 'build/humans.txt'],\n    dest: 'public',\n    variables: {\n      version: '<%= pkg.version %>',\n      timestamp: '<%= grunt.template.today() %>'\n    }\n  }\n}\n```\n\n#### Replace over both src with variables at replacer space (multiple target)\n\n```javascript\nreplace: {\n  foo: {\n    src: ['build/foo.txt'],\n    dest: 'public'\n  },\n  dist: {\n    src: ['build/manifest.appcache', 'build/humans.txt'],\n    dest: 'public'\n  }\n},\n// ...\nreplacer: {\n  variables: {\n    version: '<%= pkg.version %>',\n    timestamp: '<%= grunt.template.today() %>'\n  }\n}\n```\n\n#### Define prefix for pattern lookup (in target)\n\n```javascript\nreplace: {\n  dist: {\n    src: ['build/manifest.appcache', 'build/humans.txt'],\n    dest: 'public',\n    variables: {\n      version: '<%= pkg.version %>',\n      timestamp: '<%= grunt.template.today() %>'\n    },\n    prefix: '@@'\n  }\n}\n```\n\n#### Define prefix for pattern lookup (in replacer space)\n\n```javascript\nreplace: {\n  dist: {\n    src: ['build/manifest.appcache', 'build/humans.txt'],\n    dest: 'public'\n}\n// ...\nreplacer: {\n  variables: {\n    version: '<%= pkg.version %>',\n    timestamp: '<%= grunt.template.today() %>'\n  },\n  prefix: '@@'\n}\n```\n\n### Options\n\n```javascript\n// default\nvariables: {},\nprefix: '@@'\n```\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n## Authors\n\n**Ariel Falduto**\n\n+ <http://github.com/outaTiME>\n\n## License\n\nCopyright 2012 outaTiME.\n\nLicensed under the Apache License, Version 2.0: <http://www.apache.org/licenses/LICENSE-2.0>\n\n[grunt]: https://github.com/cowboy/grunt\n",
  "_id": "grunt-replace@0.2.1",
  "dist": {
    "shasum": "6773f0bd2518c350c2026423aea9bd7776a276d9"
  },
  "_from": "grunt-replace"
}
